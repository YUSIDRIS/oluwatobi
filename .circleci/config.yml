version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
  # Define the jobs we want to run for this project

#commands:
   #destroy_environment:
     #steps:
       #- run:
           #name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           #when: on_fail
           #command: |
            #aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  #create_infrastructure: 
    #docker:
     # - image: amazon/aws-cli
    #steps:
      #- checkout
      #- run:
          #name: Create Cloudformation Stack
          #command: |
          # aws cloudformation deploy \
          # --template-file template.yml \
           #--stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
          # --region us-west-2

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
 # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 


  #smoke_test:
    #docker:
      #- image: amazon/aws-cli
    #steps:
      #- run:
          #name: Test job
       # Fail the job intentionally to simulate an error.
          #command:  return 1
      #- destroy_environment 
        
        


 
workflows:
  myWorkflow:
    jobs:
      #- create_infrastructure
      - create_and_deploy_front_end
      - get_last_deployment_id
      #- smoke_test:
         # requires: [create_infrastructure]
